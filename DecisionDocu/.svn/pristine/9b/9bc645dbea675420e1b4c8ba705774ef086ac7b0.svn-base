package at.jku.se.database;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

import org.neo4j.jdbc.Driver;
import org.neo4j.jdbc.internal.Neo4jConnection;

import com.fasterxml.jackson.databind.ObjectMapper;

import at.jku.se.model.Decision;
import at.jku.se.model.NodeInterface;
import at.jku.se.testdata.SampleObjectProvider;

public class DBService {
	
	private static final String CONNECT_STRING = "jdbc:neo4j://ubuntu.mayerb.net:7474/";
	private static Properties properties = new Properties();
	private static Neo4jConnection con;
	private static ObjectMapper mapper = new ObjectMapper();
	
	static {
		properties.setProperty("user", "neo4j");
		properties.setProperty("password", "neose");
	}
	
	private static DBService ref;
	
	private DBService() {
	}
	
	public static DBService getDBService() {
		if (ref == null) {
			ref = new DBService();
		}
		return ref;
	}
	
	private Neo4jConnection getConnection(){
		if(con==null){
			try {
				con = new Driver().connect(CONNECT_STRING, properties);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return con;
	}
	
	public static void createNode(NodeInterface node){
		
		StringBuilder query = new StringBuilder();
		query.append("Create");
		query.append("(n:"+node.getNodeType()+"{name: \""+node.getName()+"\",creationDate: TimeStamp()");
		Map<String,String> directProperties = node.getDirectProperties();
		if(directProperties!=null){
			for(String prop:directProperties.keySet()){
				query.append(","+prop+": "+directProperties.get(prop));
			}
		}
		query.append("})");
		query.append("Return n, id(n)");
		System.out.println(query.toString());
		
		try{			
			ResultSet rs = executeQuery(query.toString());
			while (rs.next()){
				System.out.println(rs.getString("id(n)")+" "+rs.getString("n"));
				Map<Object, Object>map=new HashMap<Object, Object>();
				map =mapper.readValue(rs.getString("n"), map.getClass());
				for(Object string:map.keySet()){
					System.out.println(string);
					System.out.println(map.get(string).toString());
				}
			}
			
		}catch (Exception e){
			e.printStackTrace();
		}
		
	}
	
	private static NodeInterface resultSetToNode(ResultSet rs){
		
		NodeInterface result;
		Map<String, String> directProperties = new HashMap<String, String>();
		return null;
		
	}
	
	private static ResultSet executeQuery(String query)throws Exception{		
			Statement stmt = getDBService().getConnection().createStatement();
			return stmt.executeQuery(query);	
	}
	
	public static void main (String[] args){
		Decision dec = SampleObjectProvider.getAllDecision().get(0);
		createNode(dec);
	}

}
